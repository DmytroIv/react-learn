import React, {useState, useRef, useEffect, useContext} from 'react';
import {Link, Redirect} from "react-router-dom";
//
import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import {CurrentUserContext} from 'contexts/currentUser';
import BackendErrorMessages from 'components/backendErrorMessages';

const Authentication = (props) => {
  const isLogin = props.match.path === '/login';
  const pageTitle = isLogin ? 'Sign In' : 'Sign Up';
  const additionalLink = isLogin ?
    <Link to="/register">Need an account?</Link>
    :
    <Link to="/login">Have an account?</Link>;
  const apiUrl = isLogin ? '/users/login' : '/users';

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [isSuccessfulSubmit, setIsSuccessfulSubmit] = useState(false);
  const [{isLoading, response, error}, doFetch] = useFetch(apiUrl);
  const [, setToken] = useLocalStorage('token');
  const [, dispatch] = useContext(CurrentUserContext);

  const emailRef = useRef(null);

  useEffect(() => {
    if(!response) return;

    setToken(response.user.token);
    setIsSuccessfulSubmit(true);
    dispatch({type: 'SET_AUTHORIZED', payload: response.user});
  }, [response, setToken, dispatch]);

  const handleSubmit = (e) => {
    e.preventDefault();

    const user = isLogin ? {email, password} : {email, password, username};

    doFetch({
      method: 'post',
      data: {
        user
      }
    })
  };

  if (isSuccessfulSubmit) {
    return <Redirect to="/" />
  }

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12 text-xs-center">
            <h1>{pageTitle}</h1>
            <p>
              {additionalLink}
            </p>
            <form onSubmit={handleSubmit}>
              {error && <BackendErrorMessages backendErrors={error.errors} />}
              {!isLogin && (
                <fieldset className="form-group">
                  <input type="text"
                         className="form-control form-control-lg"
                         placeholder="User name"
                         value={username}
                         onChange={e => setUsername(e.target.value)}/>
                </fieldset>
              )}
              <fieldset className="form-group">
                <input type="email"
                       className="form-control form-control-lg"
                       placeholder="Email"
                       ref={emailRef}
                       value={email}
                       onChange={e => setEmail(e.target.value)}/>
              </fieldset>
              <fieldset className="form-group">
                <input type="password"
                       className="form-control form-control-lg"
                       placeholder="Password"
                       value={password}
                       onChange={e => setPassword(e.target.value)}/>
              </fieldset>
              <button disabled={isLoading}
                      type="submit"
                      className="btn btn-lg btn-primary pull-xs-right">
                {pageTitle}
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Authentication;